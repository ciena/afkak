# A tox config file for afkak
[tox]
envlist = {py27,pypy}-{lint,unit,unit-snappy,unit-murmur,int-snappy-murmur},py35-{lint,unit,unit-snappy,int-snappy}

[testenv]
setenv =
    PROJECT_ROOT={toxinidir}
    PYTHONWARNINGS=all,ignore::ImportWarning,ignore::DeprecationWarning,ignore::PendingDeprecationWarning
    LC_ALL=C.UTF-8
    PIP_DISABLE_VERSION_CHECK=y
    VIRUALENV_NO_DOWNLOAD=y
    AFKAK_TEST_LOG={envtmpdir}/test.log

passenv =
    KAFKA_VERSION
    CPPFLAGS
    LANG
    TEAMCITY_VERSION

extras =
    snappy: snappy
    murmur: FastMurmur2

deps =
    coverage==4.0.1
    mock==1.3.0
    nose==1.3.7
    nose-timer==0.5.0
    Twisted==17.9.0
    lint: flake8
    pylint: pylint

commands =
    int: {toxinidir}/tools/download-kafka {env:KAFKA_VERSION}

    # Prefix the test command when coverage is requested. Note the trailing
    # backslash: it is important!
    coverage: coverage run --parallel --branch --source afkak \

    # Run just the non-integration tests
    unit: {envbindir}/nosetests {posargs:--with-id --with-timer --timer-top-n 10 \
    unit:  --logging-level=DEBUG --verbosity=2 \
    unit:  --logging-format='%(asctime)s %(levelname)s %(filename)s:%(lineno)d: %(message)s'} \
    unit:  --exclude=.*_integration\.py

    # Run just the integration tests
    int: {envbindir}/nosetests --with-id --with-timer --timer-top-n 10 \
    int:  --logging-level=DEBUG --verbosity=2 \
    int:  --logging-format='%(asctime)s %(levelname)s %(filename)s:%(lineno)d: %(message)s' \
    int:  --ignore-files=^((?!_integration).)*$ {posargs}

    lint: flake8 afkak
    pylint: pylint afkak --rcfile={toxinidir}/.pylintrc --output-format={env:PYLINT_OUTPUT_FORMAT:colorized}

[testenv:cur]
# Run just one, or a few tests...
# Add '--nologcapture ' to below to get log output to the screen. Note however,
# default log level will not be set by --logging-level=DEBUG below, you'll have
# to set it in your test(s) directly
commands =
    nosetests {posargs:--with-id --with-timer --timer-top-n 10 \
        --with-coverage --cover-erase --cover-tests --cover-package afkak \
        --logging-level=DEBUG --verbosity=2 \
        --logging-format='%(asctime)s %(levelname)s %(filename)s %(lineno)d: %(message)s'} \
        afkak.test.test_performance_integration:TestPerformanceIntegration
        # afkak.test.test_client:TestKafkaClient.test_update_cluster_hosts
        # afkak.test.test_failover_integration:TestFailover.test_switch_leader
        # afkak.test.test_client_integration:TestAfkakClientIntegration.test_commit_fetch_offsets
        # afkak.test.test_consumer:TestAfkakConsumer
        # afkak.test.test_consumer_integration:TestConsumerIntegration
        # afkak.test.test_client:TestKafkaClient.test_send_fetch_request
        # afkak.test.test_client_integration:TestAfkakClientIntegration.test_commit_fetch_offsets
        # afkak.test.test_client:TestKafkaClient.test_load_consumer_metadata_for_group
        # afkak.test.test_client:TestKafkaClient.test_load_consumer_metadata_for_group_failure
        # afkak.test.test_brokerclient:KafkaBrokerClientTestCase
        # afkak.test.test_client:TestKafkaClient
        # afkak.test.test_codec:TestCodec
        # afkak.test.test_common:TestAfkakCommon
        # afkak.test.test_consumer:TestAfkakConsumer
        # afkak.test.test_kafkacodec:TestKafkaCodec
        # afkak.test.test_package:TestPackage
        # afkak.test.test_partitioner:TestPartitioner
        # afkak.test.test_partitioner:TestRoundRobinPartitioner
        # afkak.test.test_partitioner:TestHashedPartitioner
        # afkak.test.test_producer:TestAfkakProducer
        # afkak.test.test_protocol:TestProtocol
        # afkak.test.test_util:TestUtil

[testenv:cov_erase]
description = Clear any accumulated .coverage.* files.
skip_install = true
commands =
    coverage erase

[testenv:cov_report]
description = Combine coverage reports from any unit or int test runs since the last time coverase was run.
skip_install = true
commands =
    coverage combine
    coverage report
    coverage html -d {toxinidir}/htmlcov
    coverage xml -o {toxinidir}/coverage.xml

[testenv:docs]
basepython = python2.7
deps =
    Sphinx~=1.7.6
changedir = docs
commands =
    {toxinidir}/tools/download-intersphinx
    sphinx-build -b html -d {envtmpdir}/doctrees . html

[testenv:release]
deps =
    twine==1.6.0
    wheel==0.24.0
    requests[security]==2.7.0
commands =
    python setup.py sdist bdist_wheel
    twine upload dist/* -r ciena_local

[flake8]
doctests = yes
max-line-length = 120
select = E124
max-complexity = 10
jobs = auto
