# A tox config file for afkak
[tox]
envlist = py27, pypy
indexserver =
    default = https://artifactory.ciena.com/api/pypi/blueplanet-pypi/simple

[testenv]
setenv =
  PROJECT_ROOT = {toxinidir}
  PYTHONWARNINGS=all,ignore::ImportWarning,ignore::PendingDeprecationWarning

passenv = KAFKA_VERSION CPPFLAGS LANG TEAMCITY_VERSION

deps =
    coverage==4.0.1
    mock==1.3.0
    Murmur==0.1.3
    nose==1.3.7
    nose-timer==0.5.0
    python-snappy==0.5
    Twisted==15.0.0
    unittest2==1.1.0

commands =
   nosetests {posargs:--with-id --with-timer --timer-top-n 10 \
       --with-coverage --cover-erase --cover-tests --cover-package afkak \
       --logging-level=DEBUG --verbosity=2 \
       --logging-format='%(asctime)s %(levelname)s %(filename)s:%(lineno)d: %(message)s'}
    coverage combine
    coverage report
    coverage html -d {toxinidir}/htmlcov
    coverage xml -o {toxinidir}/coverage.xml

[testenv:unit]
# Run just the non-integration tests
commands =
   nosetests {posargs:--with-id --with-timer --timer-top-n 10 \
       --with-coverage --cover-erase --cover-tests --cover-package afkak \
       --logging-level=DEBUG --verbosity=2 \
       --logging-format='%(asctime)s %(levelname)s %(filename)s:%(lineno)d: %(message)s'} \
       --exclude=.*_integration\.py

[testenv:int]
# Run just the integration tests
commands =
   nosetests {posargs:--with-id --with-timer --timer-top-n 10 \
       --with-coverage --cover-erase --cover-tests --cover-package afkak \
       --logging-level=DEBUG --verbosity=2 \
       --logging-format='%(asctime)s %(levelname)s %(filename)s:%(lineno)d: %(message)s'} \
       --ignore-files=^((?!_integration).)*$

[testenv:cur]
# Run just one, or a few tests...
# Add '--nologcapture ' to below to get log output to the screen. Note however,
# default log level will not be set by --logging-level=DEBUG below, you'll have
# to set it in your test(s) directly
commands =
    nosetests {posargs:--with-id --with-timer --timer-top-n 10 \
        --with-coverage --cover-erase --cover-tests --cover-package afkak \
        --logging-level=DEBUG --verbosity=2 \
        --logging-format='%(asctime)s %(levelname)s %(filename)s %(lineno)d: %(message)s'} \
        afkak.test.test_client:TestKafkaClient
        # afkak.test.test_client:TestKafkaClient.test_update_cluster_hosts
        # afkak.test.test_failover_integration:TestFailover.test_switch_leader
        # afkak.test.test_client_integration:TestAfkakClientIntegration.test_commit_fetch_offsets
        # afkak.test.test_consumer:TestAfkakConsumer
        # afkak.test.test_consumer_integration:TestConsumerIntegration
        # afkak.test.test_client:TestKafkaClient.test_send_fetch_request
        # afkak.test.test_client_integration:TestAfkakClientIntegration.test_commit_fetch_offsets
        # afkak.test.test_client:TestKafkaClient.test_load_consumer_metadata_for_group
        # afkak.test.test_client:TestKafkaClient.test_load_consumer_metadata_for_group_failure
        # afkak.test.test_brokerclient:KafkaBrokerClientTestCase
        # afkak.test.test_client:TestKafkaClient
        # afkak.test.test_codec:TestCodec
        # afkak.test.test_common:TestAfkakCommon
        # afkak.test.test_consumer:TestAfkakConsumer
        # afkak.test.test_kafkacodec:TestKafkaCodec
        # afkak.test.test_package:TestPackage
        # afkak.test.test_partitioner:TestPartitioner
        # afkak.test.test_partitioner:TestRoundRobinPartitioner
        # afkak.test.test_partitioner:TestHashedPartitioner
        # afkak.test.test_producer:TestAfkakProducer
        # afkak.test.test_protocol:TestProtocol
        # afkak.test.test_util:TestUtil

[testenv:coverage]
usedevelop = false
setenv =
  PROJECT_ROOT = {toxinidir}
  PYTHONWARNINGS=all,ignore::ImportWarning

commands =
   nosetests {posargs:--with-id --with-timer --timer-top-n 10 \
       --with-coverage --cover-branches --cover-erase --cover-tests --cover-package afkak \
       --logging-level=DEBUG --verbosity=2 --cover-min-percentage=100 \
       --logging-format='%(asctime)s %(levelname)s %(filename)s:%(lineno)d: %(message)s'}
    coverage combine
    coverage report
    coverage html -d {toxinidir}/htmlcov
    coverage xml -o {toxinidir}/coverage.xml

[testenv:lint]
deps =
  {[testenv]deps}
  flake8
  pylint
commands =
  flake8 afkak
  pylint afkak --rcfile={toxinidir}/.pylintrc --output-format={env:PYLINT_OUTPUT_FORMAT:colorized}

[testenv:docs]
basepython = python2.7
deps =
    Sphinx==1.3
changedir = docs
commands =
    sphinx-build -W -b html -d {envtmpdir}/doctrees . html

[testenv:release]
deps =
  twine==1.6.0
  wheel==0.24.0
  requests[security]==2.7.0
commands =
  python setup.py sdist bdist_wheel
  twine upload dist/* -r ciena_local

[flake8]
doctests = yes
max-line-length = 120
select = E124
max-complexity = 10
jobs = auto
